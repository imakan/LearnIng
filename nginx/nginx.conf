user  nginx;
worker_processes  1;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;
events {
  worker_connections  1024;
}
http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
  access_log  /var/log/nginx/access.log  main;
  sendfile        on;
  #tcp_nopush     on;
  keepalive_timeout  65;
  # 允许客户端上传tcp字节大小
  client_max_body_size 60M;
  # gzip 配置;
  # 开启gzip
  gzip			on;
  # 启用gzip压缩的最小文件，小于设置值的文件将不会压缩
  gzip_min_length	1100k; #小于多少字节，就不在执行压缩了，因为有些特别小的文件内容，在一个tcp报文中就发出去了，没必要压缩
  # gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间
  gzip_comp_level	4; # 压缩级别
  # 是否在http header中添加Vary: Accept-Encoding，建议开启
  gzip_vary on;
  # 禁用IE 6 gzip
  gzip_disable "MSIE [1-6]\.";
  # 设置用于处理请求压缩的缓冲区数量和大小，32 4K表示按照内存页（one memory page）大小以4K为单位（即一个系统中内存页为4K），申请32倍的内存空间。建议此项不设置，使用默认值。
  gzip_buffers 32 4k;
  gzip_types  text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/bmp application/x-bmp image/x-ms-bmp application/vnd.ms-fontobject font/ttf font/opentype font/x-woff;
  
  server {
    listen       80;
    server_name  _;
    location / {
      proxy_pass http://127.0.0.1:3000/;
    }
  }
}
