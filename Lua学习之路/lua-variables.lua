#! /usr/local/bin/lua

--[[
变量在使用前，必须在代码进行声明，即是创建该变量
编译程序执行代码之前需要知道如何给变量开辟空间，用于存储变量的值 
lua变量有三种类型：全局变量，局部变量，表中的域
lua中的变量都是全局变量，哪怕是语句块或者函数里，除非用local显式声明为局部变量
局部变量的作用域为从声明位置开始到所在语句块结束
变量的默认值均为nil
--]]

a = 5; -- 全局变量
local b = 5; -- 局部变量
function joke()
  c = 5; --全局变量
  local d = 6; --局部变量
end

joke()
-- print(c,d)

do
  local a = 6; --局部变量
  b = 6; --对局部变量重新赋值
  -- print(a,b)
end
-- print(a,b)


-- 赋值语句

-- 赋值是改变一个变量的值和改变表域的最基本的方法

-- a = "hello".."world"
-- t.n = t.n + 1

-- lua可以对多个变量同时赋值，变量列表和值列表的各个元素用逗号分开，赋值语句右边的值会依次赋值给左边的变量

a,b = 10,20 -- <---> a = 10;b= 20

-- 遇到赋值语句lua会先计算右边所有的值，然后再执行赋值操作，所以我们可以这样进行交换变量

-- x,y = y,x  -- swap 'x' for 'y'

-- a[i],a[j] = a[j],a[i]

-- 当变量个数和值的个数不一致时，Lua会一直以变量个数为基础采取以下策略

--[[
a.变量个数>值的个数   按变量个数弥补足nil
b.变量个数<值的个数 多余的值会被忽略
--]]
a,b,c = 0,1
print(a,b,c) ---> 0  1 nil


-- 多值赋值经常用来交换变量，或将函数调用返回给变量：

-- a,b = f()
-- f()返回两个值，第一个赋给a,第二个赋给b

-- 应该尽可能的使用局部变量，有两个好处，
-- 1、避免命名冲突
-- 2、访问局部变量的速度比全局变量更快


-- 索引

-- 对table的索引使用方括号[],lua也提供了.(点)操作







